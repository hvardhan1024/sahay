<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="min-h-screen bg-gray-50">
  <%- include('../../partials/navbar') %>
  
  <div class="flex">
    <%- include('../../partials/sidebar') %>
    
    <!-- Main Content -->
    <div class="flex-1 p-8">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-800 mb-2">Student Community</h1>
        <p class="text-gray-600">Connect with students who might benefit from your support and guidance.</p>
      </div>

      <!-- Search and Filter -->
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
        <div class="flex flex-col md:flex-row gap-4">
          <div class="flex-1">
            <input
              type="text"
              id="search-students"
              placeholder="Search students by name or institution..."
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            >
          </div>
          <div>
            <select
              id="institution-filter"
              class="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            >
              <option value="">All Institutions</option>
              <% 
                const institutions = [...new Set(students.map(s => s.institution).filter(Boolean))];
                institutions.forEach(institution => { 
              %>
                <option value="<%= institution %>"><%= institution %></option>
              <% }); %>
            </select>
          </div>
        </div>
      </div>

      <!-- Students Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="students-grid">
        <% if (students.length > 0) { %>
          <% students.forEach(student => { %>
            <div class="student-card bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow" 
                 data-name="<%= student.name.toLowerCase() %>" 
                 data-institution="<%= (student.institution || '').toLowerCase() %>">
              
              <!-- Student Avatar -->
              <div class="flex items-center space-x-4 mb-4">
                <div class="w-12 h-12 bg-gradient-to-br from-green-400 to-blue-500 rounded-full flex items-center justify-center">
                  <span class="text-white font-bold text-lg">
                    <%= student.name.charAt(0).toUpperCase() %>
                  </span>
                </div>
                <div>
                  <h3 class="font-semibold text-gray-800"><%= student.name %></h3>
                  <div class="flex items-center space-x-2">
                    <div class="w-2 h-2 bg-green-400 rounded-full"></div>
                    <span class="text-sm text-gray-500">Active</span>
                  </div>
                </div>
              </div>

              <!-- Student Info -->
              <div class="space-y-3 mb-6">
                <% if (student.age) { %>
                  <div class="flex items-center space-x-2 text-sm text-gray-600">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    <span><%= student.age %> years old</span>
                  </div>
                <% } %>

                <% if (student.institution) { %>
                  <div class="flex items-center space-x-2 text-sm text-gray-600">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                    </svg>
                    <span><%= student.institution %></span>
                  </div>
                <% } %>

                <div class="flex items-center space-x-2 text-sm text-gray-600">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3a1 1 0 011-1h6a1 1 0 011 1v4M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V9a2 2 0 00-2-2h-2M8 7V5a1 1 0 011-1h4a1 1 0 011 1v2M9 12l2 2 4-4"></path>
                  </svg>
                  <span>Joined <%= new Date(student.joinedAt).toLocaleDateString() %></span>
                </div>
              </div>

              <!-- Student Bio -->
              <% if (student.bio) { %>
                <div class="mb-6">
                  <p class="text-sm text-gray-600 line-clamp-3">
                    <%= student.bio %>
                  </p>
                </div>
              <% } %>

              <!-- Action Buttons -->
              <div class="flex space-x-3">
                <button
                  onclick="connectWithStudent('<%= student._id %>', '<%= student.name %>')"
                  class="flex-1 bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors font-medium text-sm"
                >
                  Connect
                </button>
                <button
                  onclick="viewStudentDetails('<%= student._id %>')"
                  class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium text-sm"
                >
                  View
                </button>
              </div>
            </div>
          <% }); %>
        <% } else { %>
          <div class="col-span-full text-center py-12">
            <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
            </svg>
            <h3 class="text-lg font-semibold text-gray-600 mb-2">No Students Yet</h3>
            <p class="text-gray-500">Students haven't joined the platform yet. Check back later!</p>
          </div>
        <% } %>
      </div>

      <!-- Helper Tips -->
      <div class="mt-8 bg-blue-50 border border-blue-200 rounded-xl p-6">
        <div class="flex items-start space-x-3">
          <div class="flex-shrink-0">
            <svg class="w-6 h-6 text-blue-600 mt-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <div>
            <h4 class="font-semibold text-blue-800 mb-3">Tips for Connecting with Students</h4>
            <ul class="text-sm text-blue-700 space-y-2">
              <li>• Start with a friendly introduction and let them know you're here to help</li>
              <li>• Ask open-ended questions to understand their situation better</li>
              <li>• Be patient and listen actively without rushing to give advice</li>
              <li>• Share appropriate resources and coping strategies</li>
              <li>• Know your limits and refer to professional help when needed</li>
              <li>• Follow up periodically to show you care about their progress</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Connect Modal -->
  <div id="connect-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-xl max-w-md w-full p-6">
        <div class="flex items-center space-x-3 mb-4">
          <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-gray-800">Connect with Student</h3>
        </div>
        <p class="text-gray-600 mb-6">
          Great! You can connect with <span id="student-name-modal">this student</span> through the group chat where you can offer support and guidance.
        </p>
        <div class="flex space-x-3">
          <button onclick="closeConnectModal()" class="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
            Cancel
          </button>
          <a href="/chat" class="flex-1 text-center px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors">
            Go to Chat
          </a>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Search functionality
    const searchInput = document.getElementById('search-students');
    const institutionFilter = document.getElementById('institution-filter');
    const studentCards = document.querySelectorAll('.student-card');

    function filterStudents() {
      const searchTerm = searchInput.value.toLowerCase();
      const selectedInstitution = institutionFilter.value.toLowerCase();

      studentCards.forEach(card => {
        const name = card.dataset.name;
        const institution = card.dataset.institution;
        
        const matchesSearch = name.includes(searchTerm);
        const matchesInstitution = !selectedInstitution || institution.includes(selectedInstitution);
        
        if (matchesSearch && matchesInstitution) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    }

    searchInput.addEventListener('input', filterStudents);
    institutionFilter.addEventListener('change', filterStudents);

    // Connect with student
    function connectWithStudent(studentId, studentName) {
      document.getElementById('student-name-modal').textContent = studentName;
      document.getElementById('connect-modal').classList.remove('hidden');
    }

    function closeConnectModal() {
      document.getElementById('connect-modal').classList.add('hidden');
    }

    // View student details (placeholder)
    function viewStudentDetails(studentId) {
      // This could open a detailed modal or redirect to a detailed view
      alert('Student details view - This could show more information about the student\'s interests, goals, and how you might best support them.');
    }

    // Add line-clamp CSS
    const style = document.createElement('style');
    style.textContent = `
      .line-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }
    `;
    document.head.appendChild(style);
  </script>
</body>
</html>